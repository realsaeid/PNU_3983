0
00:00:00,0 --> 00:00:05,0
https://git.ir/

1
00:00:01.000 --> 00:00:03.004
- A software enhancement isn't a defect,

2
00:00:03.004 --> 00:00:06.008
or even a collection of defects that you're fixing,

3
00:00:06.008 --> 00:00:08.006
all at the same time.

4
00:00:08.006 --> 00:00:10.005
So what is it then?

5
00:00:10.005 --> 00:00:14.007
Simply put, an enhancement is a collection of improvements

6
00:00:14.007 --> 00:00:17.001
that users want to see in a system.

7
00:00:17.001 --> 00:00:20.001
For example, if you have a banking website,

8
00:00:20.001 --> 00:00:22.009
that sends you to a new log-in page when you click

9
00:00:22.009 --> 00:00:25.007
my balance, that's a defect.

10
00:00:25.007 --> 00:00:29.001
But, if users want to see their balances in various

11
00:00:29.001 --> 00:00:31.009
currencies, that would be an enhancement.

12
00:00:31.009 --> 00:00:33.004
Do you see the difference?

13
00:00:33.004 --> 00:00:36.004
For a defect, something isn't functioning correctly.

14
00:00:36.004 --> 00:00:39.000
For an enhancement, you're adding new features

15
00:00:39.000 --> 00:00:41.002
that users have requested.

16
00:00:41.002 --> 00:00:44.005
Now that we know this, let's explore some of the challenges

17
00:00:44.005 --> 00:00:48.001
you'll face when you're working on an enhancement project.

18
00:00:48.001 --> 00:00:52.001
The first issue you might run into, is there's no existing

19
00:00:52.001 --> 00:00:55.005
documentation about how the current website was built.

20
00:00:55.005 --> 00:00:59.004
You may have to allocate a sprint or two, for the team

21
00:00:59.004 --> 00:01:02.003
to reverse engineer the website.

22
00:01:02.003 --> 00:01:05.003
Reverse engineering is simply having the developers

23
00:01:05.003 --> 00:01:08.001
read through the code to understand the software,

24
00:01:08.001 --> 00:01:11.000
logic, and workflow of the system.

25
00:01:11.000 --> 00:01:13.007
This is a fairly straightforward issue for your team

26
00:01:13.007 --> 00:01:15.000
to work through.

27
00:01:15.000 --> 00:01:18.009
The key, is allowing them enough time to reach a healthy

28
00:01:18.009 --> 00:01:23.005
level of understanding, before diving into writing new code.

29
00:01:23.005 --> 00:01:27.001
Another issue is that enhancing an application currently

30
00:01:27.001 --> 00:01:30.000
in use is like changing the engine

31
00:01:30.000 --> 00:01:32.001
of an airplane mid-flight.

32
00:01:32.001 --> 00:01:36.001
You have people already using the system, and your changes

33
00:01:36.001 --> 00:01:40.001
may alter the features they already use and like.

34
00:01:40.001 --> 00:01:43.009
Your changes then, could result in user alienation.

35
00:01:43.009 --> 00:01:46.006
User alienation can be mitigated

36
00:01:46.006 --> 00:01:49.004
through careful change management.

37
00:01:49.004 --> 00:01:52.004
Some of the techniques you can use here are stakeholder

38
00:01:52.004 --> 00:01:55.007
mapping and joint-application design.

39
00:01:55.007 --> 00:01:58.005
Finally, the biggest and most common issue related

40
00:01:58.005 --> 00:02:01.001
to enhancing an existing application

41
00:02:01.001 --> 00:02:03.004
is unintended consequences.

42
00:02:03.004 --> 00:02:06.005
As you might guess, this means that what you build

43
00:02:06.005 --> 00:02:10.003
could have a negative impact on features or functions

44
00:02:10.003 --> 00:02:12.003
that you didn't change.

45
00:02:12.003 --> 00:02:15.002
Common areas where this crops up are in the overall

46
00:02:15.002 --> 00:02:17.002
performance of the system.

47
00:02:17.002 --> 00:02:20.007
Using our website example, adding a function to allow

48
00:02:20.007 --> 00:02:23.005
more than one currency value to be displayed

49
00:02:23.005 --> 00:02:27.001
may slow the page load time to several seconds.

50
00:02:27.001 --> 00:02:30.004
That would be unacceptable to your users.

51
00:02:30.004 --> 00:02:33.003
Another unintended consequence may be that when we make

52
00:02:33.003 --> 00:02:37.005
our currency change, we may impact reports that bank

53
00:02:37.005 --> 00:02:41.007
departments use for balance calculations or other metrics.

54
00:02:41.007 --> 00:02:44.009
In any case, it's essential that you ensure enough

55
00:02:44.009 --> 00:02:48.004
regression testing is performed on your enhancements,

56
00:02:48.004 --> 00:02:51.007
to confirm you haven't broken anything with the new code,

57
00:02:51.007 --> 00:02:54.004
and performance is maintained.

58
00:02:54.004 --> 00:02:57.007
It's tricky to enhance an existing application.

59
00:02:57.007 --> 00:03:00.006
By knowing these potential pitfalls, you'll be ready

60
00:03:00.006 --> 00:03:04.000
for them, and you can help your team succeed.

