0
00:00:00,0 --> 00:00:05,0
https://git.ir/

1
00:00:01.000 --> 00:00:03.007
- Have you ever watched something on a streaming platform

2
00:00:03.007 --> 00:00:05.009
and suddenly in the middle of the movie

3
00:00:05.009 --> 00:00:08.001
a spinning wait circle pops up?

4
00:00:08.001 --> 00:00:11.004
It drives me crazy because it's a software problem.

5
00:00:11.004 --> 00:00:13.002
Software engineers are terrific

6
00:00:13.002 --> 00:00:15.007
and they build scalable platforms.

7
00:00:15.007 --> 00:00:18.009
The problem is that the app in that moment

8
00:00:18.009 --> 00:00:22.002
has reached its maximum anticipated load

9
00:00:22.002 --> 00:00:25.003
and we just need to patiently wait.

10
00:00:25.003 --> 00:00:29.002
So, what makes a system scalable then?

11
00:00:29.002 --> 00:00:33.000
Scalable systems don't need to be completely redesigned.

12
00:00:33.000 --> 00:00:35.000
They'll still perform well during

13
00:00:35.000 --> 00:00:38.002
or after a huge increase in workload.

14
00:00:38.002 --> 00:00:41.000
In our streaming example, that workload usually

15
00:00:41.000 --> 00:00:44.005
comes in the form of simultaneous users, but it can also

16
00:00:44.005 --> 00:00:48.002
apply to storage capacity, concurrent transactions

17
00:00:48.002 --> 00:00:51.002
or anything else that pushes the system past

18
00:00:51.002 --> 00:00:54.003
its originally designed capacity.

19
00:00:54.003 --> 00:00:57.008
You can design scalability into your app, too.

20
00:00:57.008 --> 00:01:01.002
Let's take a look at the key principles of scalability

21
00:01:01.002 --> 00:01:05.000
so you can encourage your team to design for them.

22
00:01:05.000 --> 00:01:08.008
Availability is the first principle of scalability.

23
00:01:08.008 --> 00:01:10.005
It's all about making sure

24
00:01:10.005 --> 00:01:12.009
users can access your application.

25
00:01:12.009 --> 00:01:14.004
It doesn't matter how wonderful

26
00:01:14.004 --> 00:01:17.006
the app is if no one can get to it.

27
00:01:17.006 --> 00:01:19.003
Next is performance.

28
00:01:19.003 --> 00:01:22.000
As you might imagine, this is about speed.

29
00:01:22.000 --> 00:01:24.007
Even when your application is carrying a heavy load

30
00:01:24.007 --> 00:01:29.000
of users or transactions, it still needs to be fast.

31
00:01:29.000 --> 00:01:31.007
Speed is a critical predictor of user

32
00:01:31.007 --> 00:01:34.004
satisfaction with your application.

33
00:01:34.004 --> 00:01:37.005
This is a key to insuring the user experience

34
00:01:37.005 --> 00:01:41.003
is one that generates loyalty and not shopping.

35
00:01:41.003 --> 00:01:44.001
Finally, there's reliability.

36
00:01:44.001 --> 00:01:47.002
Maybe your app is always available and performs well

37
00:01:47.002 --> 00:01:50.001
under heavy workloads, but if the data presented

38
00:01:50.001 --> 00:01:53.004
to your users is wrong, it's not reliable.

39
00:01:53.004 --> 00:01:57.009
Being reliable means that the most current data is always

40
00:01:57.009 --> 00:02:01.004
presented to users and you're not defaulting to old data.

41
00:02:01.004 --> 00:02:03.009
Your users should trust all the information

42
00:02:03.009 --> 00:02:07.009
to be accurate even when the workload is high.

43
00:02:07.009 --> 00:02:11.007
There are many ways your team can design for scalability.

44
00:02:11.007 --> 00:02:15.001
You don't need to be an expert at scalable design

45
00:02:15.001 --> 00:02:18.005
to ask the team questions about these principles.

46
00:02:18.005 --> 00:02:21.002
Tab into your architects to help the team

47
00:02:21.002 --> 00:02:23.009
if these principles are new to them.

48
00:02:23.009 --> 00:02:27.002
Ensuring that your team is designing for scalability

49
00:02:27.002 --> 00:02:29.004
can have a huge impact on whether

50
00:02:29.004 --> 00:02:32.003
your app is considered a success.

51
00:02:32.003 --> 00:02:34.008
Build these ideas into your design

52
00:02:34.008 --> 00:02:39.000
and you'll build scalability into your application.

